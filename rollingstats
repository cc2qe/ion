#!/usr/bin/env python2.7

import argparse, sys
from argparse import RawTextHelpFormatter
import numpy as np
from scipy import stats

__author__ = "Colby Chiang (cc2qe@virginia.edu)"
__version__ = "$Revision: 0.0.1 $"
__date__ = "$Date: 2014-01-31 19:31 $"

# --------------------------------------
# define functions

def get_args():
    parser = argparse.ArgumentParser(formatter_class=RawTextHelpFormatter, description="\
rollingstats\n\
author: " + __author__ + "\n\
version: " + __version__ + "\n\
description: Calculate statistics on a numeric data column within a rolling window")
    parser.add_argument('-w', '--window', required=True, type=int, help='window size. must be odd. (required)')
    parser.add_argument('-c', '--col', required=False, type=int, default=1, help='column to assess (default: 1)')
    parser.add_argument('-s', '--summary', required=False, default='mean', choices=['mean', 'median', 'mode', 'sum', 'min', 'max'], help='type of rolling summary (default: mean)')
    parser.add_argument('-a', '--align', required=False, default='center', choices=['left', 'center', 'right'], help='alignment of the index with respect to the rolling window (default: center)')
    parser.add_argument('-e', '--endrule', required=False, default='constant', choices=['constant', 'keep', 'calc', 'fill'], help='behavior at beginning and end of the file.\n\'constant\' copies the first and last informative summary values\n\'keep\' retains original input values,\n\'calc\' calculates summary values from smaller windows\n\'fill\' fills summary values with \"NA\"\n(default: constant)')
    #parser.add_argument('-f', '--fill', required=False, default='NA', type=str, help='if --endrule is \'fill\', the string used to fill (default: NA)')
    parser.add_argument('file', nargs='?', type=argparse.FileType('r'), default=None, help='file to read. If \'-\' or absent then defaults to stdin.')

    # parse the arguments
    args = parser.parse_args()

    # if no input, check if part of pipe and if so, read stdin.
    if args.file == None:
        if sys.stdin.isatty():
            parser.print_help()
            exit(1)
        else:
            args.file = sys.stdin
    
    if args.window % 2 == 0:
        parser.print_help()
        print 'Input error: window size must be odd integer'
        exit(1)

    # send back the user input
    return args

def summarize(vals, stype):
    if stype == 'mean':
        summary = np.mean(vals)
    elif stype == 'median':
        summary = np.median(vals)
    elif stype == 'mode':
        summary = stats.mode(vals)[0][0]
    elif stype == 'sum':
        summary = sum(vals)
    elif stype == 'max':
        summary = max(vals)
    elif stype == 'min':
        summary = min(vals)
    return summary

# primary function
def rollingStats(f, col, window, stype, endrule, align):
    fill = 'NA'
    c = col - 1
    counter = 0
    # buffer for column to summarize
    col_buffer = []
    # buffer to hold the full lines until we can write them
    line_buffer = []

    # the amount that the col buffer is ahead of the line buffer
    if align == 'left':
        shift = 0
    elif align == 'right':
        shift = window - 1
    elif align == 'center':
        shift = window / 2

    # spool up the buffer before doing anything
    for i in xrange(window):
        v  = f.readline().rstrip().split('\t')
        line_buffer.append(v)
        col_buffer.append(float(v[c]))

    # endrule behavior at beginning of file
    if endrule == 'constant':
        for l in line_buffer[:shift]:
            col_summary = summarize(col_buffer[:window], stype)
            print '\t'.join(map(str, l + [col_summary]) )
    elif endrule == 'keep':
        for l in line_buffer[:shift]:
            col_summary = float(l[c])
            print '\t'.join(map(str, l + [col_summary]) )
    elif endrule == 'fill':
        for l in line_buffer[:shift]:
            print '\t'.join(l + [fill])
    elif endrule == 'calc':
        for i in xrange(shift):
            l = line_buffer[i]
            col_summary = summarize(col_buffer[:i+1], stype)
            print '\t'.join(map(str, l + [col_summary]) )

    # behavior in body of file
    while 1:
        # get col_summary at the end for each window
        col_summary = summarize(col_buffer[:window], stype)
        # write the line with the col replaced by the col summary
        l = line_buffer[shift]
        print '\t'.join(map(str, l + [col_summary]) )

        # add the next line and pop first element off the buffers
        line = f.readline()
        if line == '':
            break
        v = line.rstrip().split('\t')
        col_buffer.append(float(v[c]))
        line_buffer.append(v)
        col_buffer.pop(0)
        line_buffer.pop(0)

    # endrule behavior at end of file. note that the first element
    if endrule == 'constant':
        # Note the first element in the buffers has already been printed
        # so start at line_buffer[shift+1:]
        for l in line_buffer[shift+1:]:
            #print col_buffer
            col_summary = summarize(col_buffer[-window:], stype)
            print '\t'.join(map(str, l + [col_summary]) )
    elif endrule == 'keep':
        for l in line_buffer[shift+1:]:
            col_summary = float(l[c])
            print '\t'.join(map(str, l + [col_summary]) )
    elif endrule == 'fill':
        for l in line_buffer[shift+1:]:
            print '\t'.join(l + [fill])
    elif endrule == 'calc':
        for i in xrange(window - shift - 1): # the shift in the other direction
            l = line_buffer[shift - window + i + 1]
            col_summary = summarize(col_buffer[-window:], stype)
            print '\t'.join(map(str, l + [col_summary]) )
    return

# --------------------------------------
# main function

def main():
    # parse the command line args
    args = get_args()

    # call primary function
    rollingStats(args.file, args.col, args.window, args.summary, args.endrule, args.align)

    # close the input file
    args.file.close()

# initialize the script
if __name__ == '__main__':
    sys.exit(main())
