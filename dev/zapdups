#!/bin/bash

# define usage function
usage(){
    echo "usage: zapdups [-h] [-uv] [-d delimiter] [-k column] file

zapdups 0.0.2
author: Colby Chiang (cc2qe@virginia.edu)
description: Removes duplicate lines from a file without reordering

positional arguments:
  file  default behavior assumes that duplicate entries are consecutive.
          If not, use the -u flag. (default is stdin)

optional arguments:
  -h    show this message and exit
  -k    key column for matches (default: 0, for full line match)
          ex:  -k 2; -k 8,2,4,5; -k 4-7; -k 1,4-7,10,12-15,8
  -d    input file delimiter (default: \t)
  -u    don't assume duplicates are consecutive (uses more memory)
  -v    only print duplicates (cannot be combined with -u flag)"
    exit 1
}

# parse the k string. -k
parsek() {
    k_arr=$(echo $1 | tr "," "\n")
    
    parsed_k=
    for key in ${k_arr}
    do
	if [[ $key == *-* ]]
	then
	    range=$(echo $key | tr "-" "\n")
	    for i in $(seq ${range[0]} ${range[1]})
	    do
		parsed_k+=\$${i}\"${delim}\"
	    done
	else
	    parsed_k+=\$${key}\"${delim}\"
	fi
    done
}

# set default values
k=0
delim="\t"
unsorted=false
inverse=false

# process command line args
while getopts huk:d:v opt
do
    case "$opt" in
	h) usage;;
	u) unsorted=true;;
	k) k=$OPTARG;;
	d) delim=$OPTARG;;
	v) inverse=true;;
	\?) usage;;
    esac
done

# set the last arg as the positional arg for input
input=${@:$OPTIND:1}

# if no pipe and no input arg, then print usage and exit
if [[ -t 0 && $input == "" ]]
then
    usage
fi

# convert the k value to something awk can use (if it has commas)
parsek $k

# if input is unsorted, make an array to store entries
# that have already been visited, and only print if next
# entry is not in the array
if $unsorted
then
    if $inverse
    then
	echo -e "\nERROR: -v option cannot be combined with -u option\n"
	usage
    else
	awk "!array[${parsed_k}]++" FS=$delim OFS=$delim $input
    fi

# if input file is sorted, only check the previous entry
# for a match
else
    if $inverse
    then
	awk "BEGIN { FIRSTMATCH=0 } { if (${parsed_k}==PREVK) { if (FIRSTMATCH) { print PREVLINE; FIRSTMATCH=0 } print \$0; } else FIRSTMATCH=1; PREVK=${parsed_k}; PREVLINE=\$0 }" FS=$delim OFS=$delim $input
    else
	awk "{if (${parsed_k}!=PREV) print \$0; PREV=${parsed_k}}" FS=$delim OFS=$delim $input
    fi
fi

# exit cleanly
exit 0
