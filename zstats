#!/usr/bin/env python

import argparse, sys
from argparse import RawTextHelpFormatter
from collections import Counter
import math

__author__ = "Colby Chiang (cc2qe@virginia.edu)"
__version__ = "0.0.1"
__date__ = "$Date: 2013-05-09 14:31 $"

# --------------------------------------
# define functions

def get_args():
    parser = argparse.ArgumentParser(formatter_class=RawTextHelpFormatter, description="\
zstats " + __version__ + "\n\
author: " + __author__ + "\n\
description: Calculate basic numeric statistics")
    parser.add_argument('-a', '--abs', action='store_true', help='take absolute values of input before calculating stats')
    parser.add_argument('-p', '--ptile', type=str, default=None, help='comma separated list of percentiles to display (default: 2.5,25,50,75,97.5)')
    parser.add_argument('data', nargs='?', type=argparse.FileType('r'), default=None, help='input column of numbers. (default: stdin)')

    # parse the arguments
    args = parser.parse_args()

    # if no input, check if part of pipe and if so, read stdin.
    if args.data == None:
        if sys.stdin.isatty():
            parser.print_help()
            exit(1)
        else:
            args.data = sys.stdin
    return args

# get the number of entries in the set
def countRecords(myCounter):
    numRecords = sum(myCounter.values())
    return numRecords

# sum of the entries
def sumRecords(myCounter):
    mySum = 0.0
    for c in myCounter:
        mySum += c * float(myCounter[c])
    return mySum


# calculate the arithmetic mean, given a counter and the
# length of the feature (chromosome or genome)
# for x percentile, x% of the elements in the set are
# <= the output value
def mean(myCounter):
    # the number of total entries in the set is the
    # sum of the occurrences for each value
    numRecords = countRecords(myCounter)

    # u holds the mean
    u = float

    u = sumRecords(myCounter) / numRecords
    return u

def stdev(myCounter):
    # the number of total entries in the set is the
    # sum of the occurrences for each value
    numRecords = countRecords(myCounter)

    # u holds the mean
    u = mean(myCounter)
    sumVar = 0.0

    # stdev is sqrt(sum((x-u)^2)/#elements)
    for c in myCounter:
        sumVar += myCounter[c] * (c - u)**2
    myVariance = float(sumVar) / numRecords
    stdev = myVariance**(0.5)
    return stdev

def variance(myCounter):
    # the number of total entries in the set is the
    # sum of the occurrences for each value
    numRecords = countRecords(myCounter)

    # u holds the mean
    u = mean(myCounter)
    sumVar = 0.0

    # stdev is sqrt(sum((x-u)^2)/#elements)
    for c in myCounter:
        sumVar += myCounter[c] * (c - u)**2
    myVariance = float(sumVar) / numRecords
    return myVariance

# the geometrice mean is the nth root of the product
# of n values. Here we'll use a logrithmic representation
# so we don't have to deal with rounding error from large
# products.
# geo_mean = exp(arithMean(ln(a_i))
def geoMean(myCounter):
    # if there is a zero in the data, then geometric
    # mean is undefined
    if 0.0 in list(myCounter):
        return 'undef (zero found in data)'

    numRecords = countRecords(myCounter)

    # counter for the log values
    logCounts = Counter()

    # store the log counts 
    for c in myCounter:
        if c < 0:
            return 'undef (negative number found in data)'
        logCounts[math.log(c)] += myCounter[c]
            
    # the mean of the log values
    meanLog = mean(logCounts)

    return math.exp(meanLog)


# calculate quartiles or percentiles from the depth counter.
# percentile(depthCount, 0.5) returns the median
def percentile(myCounter, q):
    # perc is percentile value to return
    perc = float
    #length is the number of bases we're looking at
    numEntries = countRecords(myCounter)

    # the number of entries through the set
    # we've gone
    b = 0

    # stopping point. Halfway for median, percentile otherwise
    limit = float(numEntries) * q

    # a list of the values. Sort it from
    # smallest to largest and start counting to
    # halfway through the # of entries
    valueList = list(myCounter)
    valueList.sort()

    # iterator i
    i = 0
    while b <= limit:
        # if p is exactly halfway, then we must
        # take the mean of the two surrounding.
        if b == limit:
            perc = (valueList[i-1] + valueList[i]) / float(2)
            return perc

        myValue = valueList[i]

        # myCounter[myValue] is the number of entries
        # that have myValue
        b += myCounter[myValue]
        i += 1
    perc = valueList[i-1]
    return perc

# median is simply 50th percentile
def median(myCounter):
    return percentile(myCounter, 0.5)

def mode(myCounter):
    return myCounter.most_common()[0]

def antimode(myCounter):
    return myCounter.most_common()[:-2:-1][0]

def minimum(myCounter):
    return min(list(myCounter))

def maximum(myCounter):
    return max(list(myCounter))
    

# primary function
def calcStats(data, absolute, ptile):
    # Each entry in valueCounts is a value, and its count is
    # the number of instances of that value observed in the dataset.
    # So valueCount[5] is the number of times 5 has been seen in the data.
    valueCounts = Counter()
    
    for line in data:
        lineVal = float(line.strip())
        
        # if absolute flag, then absolutize the lineVal
        if absolute:
            lineVal = abs(lineVal)
        
        # add the lineVal to the counter
        valueCounts[lineVal] += 1
    
    # print the formatted output.
    print 'num records:\t%s' % countRecords(valueCounts)
    print 'sum:\t\t%s' % sumRecords(valueCounts)
    print 'arith. mean:\t%s' % mean(valueCounts)
    print 'geo. mean:\t%s' % geoMean(valueCounts)
    print 'median:\t\t%s' % median(valueCounts)
    print 'q1:\t\t%s' % percentile(valueCounts, 0.25)
    print 'q3:\t\t%s' % percentile(valueCounts, 0.75)
    print '2.5%%:\t\t%s' % percentile(valueCounts, 0.025)
    print '97.5%%:\t\t%s' % percentile(valueCounts, 0.975)
    if ptile:
        for myPtile in ptile.split(','):
            pfloat = float(myPtile)/100
            if pfloat >= 1 or pfloat < 0:
                print "Error: percentile %s is not between 0 and 100" % myPtile
                exit(1)
            print '%s%%:\t\t%s' % (myPtile, percentile(valueCounts, pfloat))
    print 'min:\t\t%s' % minimum(valueCounts)
    print 'max:\t\t%s' % maximum(valueCounts)
    print 'mode:\t\t%s (N=%s)' % mode(valueCounts)
    print 'anti-mode:\t%s (N=%s)' % antimode(valueCounts)
    print 'stdev:\t\t%s' % stdev(valueCounts)
    print 'variance:\t%s' % variance(valueCounts)

    return

# --------------------------------------
# main function

def main():
    # parse the command line args
    args = get_args()

    # store into global values
    data = args.data
    absolute = args.abs
    ptile = args.ptile
    
    # call primary function
    calcStats(data, absolute, ptile)
    
    # close the file
    data.close()

# initialize the script
if __name__ == '__main__':
    sys.exit(main())
