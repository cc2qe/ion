#!/bin/bash

# define usage function
usage(){
    echo "usage: zapdups [-h] [-uv] [-d delimiter] [-k column] file

zapdups 0.0.3
author: Colby Chiang (cc2qe@virginia.edu)
description: Removes duplicate lines from a file without reordering

positional arguments:
  file  default behavior assumes that duplicate entries are consecutive.
          If not, use the -u flag. (default is stdin)

optional arguments:
  -h    show this message and exit
  -k    key column for matches (default: 0, for full line match)
          ex:  -k 2; -k 8,2,4,5; -k 4-7; -k 1,4-7,10,12-15,8
  -d    input file delimiter (default: \t)
  -u    don't assume duplicates are consecutive (uses more memory)
  -v    only print duplicates (cannot be combined with -u flag)
  -z    also omit the first appearance of a block of duplicates
          (cannot be combined with -u flag)"
    exit 1
}

# parse the k string. -k
parsek() {
    k_arr=$(echo $1 | tr "," "\n")
    
    parsed_k=
    for key in ${k_arr}
    do
	if [[ $key == *-* ]]
	then
	    range=$(echo $key | tr "-" "\n")
	    for i in $(seq ${range[0]} ${range[1]})
	    do
		parsed_k+=\$${i}\"${delim}\"
	    done
	else
	    parsed_k+=\$${key}\"${delim}\"
	fi
    done
}

# set default values
k=0
delim="\t"
unsorted=false
inverse=false
omit_first=false

# process command line args
while getopts huk:d:vz opt
do
    case "$opt" in
	h) usage;;
	u) unsorted=true;;
	k) k=$OPTARG;;
	d) delim=$OPTARG;;
	v) inverse=true;;
	z) omit_first=true;;
	\?) usage;;
    esac
done

# set the last arg as the positional arg for input
input=${@:$OPTIND:1}

# if no pipe and no input arg, then print usage and exit
if [[ -t 0 && $input == "" ]]
then
    usage
fi

# convert the k value to something awk can use (if it has commas)
parsek $k

# if input is unsorted, add each new element to array of visited
# elements, and add 1 to the array's value. If an element is not
# yet in the array, it's value will be 0 and it will be printed.
if $unsorted
then
    if $inverse
    then
	echo -e "\nERROR: -v option cannot be combined with -u option\n"
	usage
    elif $omit_first
    then
	echo -e "\nERROR: -z option cannot be combined with -u option\n"
	usage
    else
	awk "!array[${parsed_k}]++" FS=$delim OFS=$delim $input
    fi

else
    # if input file is sorted, only check the previous entry
    # for a match
    if $inverse
    then
	awk "BEGIN { MATCH=0 } { if (${parsed_k}==PREVK) { if (MATCH) { print PREVLINE; MATCH=0 } print \$0; } else MATCH=1; PREVK=${parsed_k}; PREVLINE=\$0 }" FS=$delim OFS=$delim $input
    # if omit_first, then don't print the first match in a block
    # of duplicates
    elif $omit_first
    then
	awk "BEGIN { MATCHABOVE=0 } { if (${parsed_k}==PREVK) { MATCHABOVE=1; } else { if (! MATCHABOVE) { if (NR>1) print PREVLINE } MATCHABOVE=0;} PREVK=${parsed_k}; PREVLINE=\$0; }" FS=$delim OFS=$delim $input
    # otherwise, default behavior
    else
	awk "{if (${parsed_k}!=PREV) print \$0; PREV=${parsed_k}}" FS=$delim OFS=$delim $input
    fi
fi

# exit cleanly
exit 0
